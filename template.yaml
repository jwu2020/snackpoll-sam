AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  sam-app

  Sample SAM Template for sam-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Environment:
      Variables:
        DB_REGION: ap-southeast-2
        SECRET_NAME: !Sub "${DatabaseName}-AuroraUserSecret"
    VpcConfig:
      SecurityGroupIds:
        - !GetAtt RDSSecurityGroup.GroupId
      SubnetIds:
        - !Ref SubnetB
        - !Ref SubnetA
  Api:
    Cors:
      AllowMethods: "'GET,POST,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"
      AllowCredentials: "'*'"

Parameters:
  AppName:
    Description: "Application name"
    Type: String
    Default: SnackVotingPoll
  EnvType:
    Description: "Environment type (eg, dev, qa, prod)"
    Type: String
    Default: dev
  DBClusterName:
    Description: "RDS Cluster name"
    Type: String
    Default: SnackRDSCluster
  DatabaseName:
    Description: "RDS DB name"
    Type: String
    Default: submission
  DBMasterUserName:
    AllowedPattern: "[a-zA-Z0-9_]+"
    ConstraintDescription: must be between 1 to 16 alphanumeric characters.
    Description: The database admin account user name, between 1 to 16 alphanumeric characters.
    MaxLength: '16'
    MinLength: '1'
    Type: String
    Default: admin_user


########################################################################################################################
#                                                Roles & policies                                                      #
########################################################################################################################
Resources:

  SnackServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: 'SnackServiceRole'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - lambda.amazonaws.com
                - secretsmanager.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/SecretsManagerReadWrite
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        - arn:aws:iam::aws:policy/AWSLambda_FullAccess
      Policies:
        - PolicyName: rds-iamauth
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 'rds-db:connect'
                Resource: '*'



########################################################################################################################
#                                                NETWORKING                                                            #
########################################################################################################################
  VPCMain:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow http to client host
      VpcId:
        Ref: VPCMain
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: AppName
          Value: !Ref AppName

  RDSBaseIngress:
     Type: 'AWS::EC2::SecurityGroupIngress'
     Properties:
        GroupId: !Ref RDSSecurityGroup
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        SourceSecurityGroupId: !GetAtt RDSSecurityGroup.GroupId

  RDSBaseEgress:
     Type: 'AWS::EC2::SecurityGroupEgress'
     Properties:
        GroupId: !Ref RDSSecurityGroup
        IpProtocol: tcp
        FromPort: 3306
        ToPort: 3306
        DestinationSecurityGroupId: !GetAtt RDSSecurityGroup.GroupId

  SubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2a
      CidrBlock: 172.31.0.0/24
      Tags:
        - Key: App
          Value: SnackPoll
      VpcId:
        Ref: VPCMain

  SubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: ap-southeast-2b
      CidrBlock: 172.31.1.0/24
      Tags:
        - Key: App
          Value: SnackPoll
      VpcId:
        Ref: VPCMain

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: CloudFormation managed DB subnet group.
      SubnetIds:
        - !Ref SubnetB
        - !Ref SubnetA
      Tags:
        - Key: App
          Value: Snack Poll Stack

  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "${DatabaseName}-AuroraUserSecret"
      Description: RDS database auto-generated user password
      GenerateSecretString:
        SecretStringTemplate: !Sub '{"username": "${DBMasterUserName}"}'
        GenerateStringKey: "password"
        PasswordLength: 30
        ExcludeCharacters: '"@/\'

  MySecretResourcePolicy:
    Type: 'AWS::SecretsManager::ResourcePolicy'
    Properties:
      SecretId: !Ref DBSecret
      ResourcePolicy:
        Version: 2012-10-17
        Statement:
          - Resource: '*'
            Action: 'secretsmanager:GetSecretValue'
            Effect: Allow
            Principal:
              AWS: !GetAtt SnackServiceRole.Arn


#########################################################################################################################
##                                                    RDS                                                               #
#########################################################################################################################
#
  RDSCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      DBClusterIdentifier: !Ref DBClusterName
      MasterUsername: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:username}}' ]]
      MasterUserPassword: !Join ['', ['{{resolve:secretsmanager:', !Ref DBSecret, ':SecretString:password}}' ]]
      DatabaseName: !Ref DatabaseName
      Engine: aurora
      EngineMode: serverless
      EngineVersion: 5.6.10a
      EnableHttpEndpoint: true
      ScalingConfiguration:
        AutoPause: true
        MaxCapacity: 4
        MinCapacity: 1
        SecondsUntilAutoPause: 900 # 15 min
      DBSubnetGroupName:
        Ref: DBSubnetGroup
      VpcSecurityGroupIds:
        - !GetAtt RDSSecurityGroup.GroupId

##########################################################################################################################
###                                                    LAMBDAS                                                           #
##########################################################################################################################
  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod


  GetSubmissionFunction:
    Type: 'AWS::Serverless::Function'
    VpcConfig:
      SecurityGroupIds:
        - !GetAtt RDSSecurityGroup.GroupId
      SubnetIds:
        - !Ref SubnetB
        - !Ref SubnetA
    Properties:
      Runtime: python3.8
      CodeUri: get_submission/
      Handler: main.lambda_handler
      Description: 'Grabs all entries in the submissions RDS table'
      Events:
        Api1:
          Type: Api
          Properties:
            Path: /submission
            Method: GET
            RestApiId:
              Ref: ApiGatewayApi
#
      Role: !GetAtt SnackServiceRole.Arn
      Environment:
        Variables:
          RDS_DB_NAME: !Ref DatabaseName
          RDS_HOST: !GetAtt RDSCluster.Endpoint.Address
#
#
#  EnterSubmissionFunction:
#    Type: 'AWS::Serverless::Function'
#    VpcConfig:
#      SecurityGroupIds:
#        - !GetAtt RDSSecurityGroup.GroupId
#      SubnetIds:
#        - !Ref SubnetB
#        - !Ref SubnetA
#    Properties:
#      Runtime: python3.8
#      CodeUri: enter_submission/
#      Handler: main.lambda_handler
#      Description: 'Puts a new entry in the submission table'
#      Events:
#        Api1:
#          Type: Api
#          Properties:
#            Path: /submission
#            Method: POST
#      Role: !GetAtt SnackServiceRole.Arn
#      Environment:
#        Variables:
#          RDS_DB_NAME: !Ref DatabaseName
#          RDS_HOST: !GetAtt RDSCluster.Endpoint.Address
#
  VPCSMEndpoint:
    Type: 'AWS::EC2::VPCEndpoint'
    Properties:
      VpcEndpointType: 'Interface'
      PrivateDnsEnabled: 'true'
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: '*'
            Action:
              - '*'
            Resource:
              - '*'
      ServiceName: !Sub 'com.amazonaws.${AWS::Region}.secretsmanager'
      VpcId: !Ref VPCMain
      SubnetIds:
        - !Ref SubnetB
        - !Ref SubnetA
      SecurityGroupIds:
        - !GetAtt RDSSecurityGroup.GroupId
#
##########################################################################################################################
###                                                     Amplify                                                          #
##########################################################################################################################

  AmplifyRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - amplify.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: Amplify
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: "amplify:*"
                Resource: "*"

  AmplifyApp:
    Type: "AWS::Amplify::App"
    Properties:
      Name: Serverless Snack Poll
      Repository: https://github.com/jwu2020/serverless-react
      Description: React Serverless App
      OauthToken: "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"
      BuildSpec: |-
        version: 0.1
        frontend:
          phases:
            preBuild:
              commands:
                - npm ci
            build:
              commands:
                - npm run build
          artifacts:
            baseDirectory: build
            files:
              - '**/*'
      IAMServiceRole: !GetAtt AmplifyRole.Arn
      EnvironmentVariables:
        - Name: REACT_APP_API_GATEWAY_BASE_URL
          Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod"

  AmplifyBranch:
    Type: AWS::Amplify::Branch
    Properties:
      BranchName: master
      AppId: !GetAtt AmplifyApp.AppId
      Description: Master Branch
      EnableAutoBuild: true
      Tags:
        - Key: Name
          Value: App-master
        - Key: Branch
          Value: master



Outputs:
  StackName:
    Description: Aurora Stack Name
    Value: !Ref AWS::StackName
    Export:
      Name: !Sub ${AWS::StackName}-StackName

  rolearn:
    Description: RoleARN
    Value: !Ref SnackServiceRole
    Export:
      Name: !Sub ${AWS::StackName}-RoleARN


  DatabaseName:
    Description: Aurora Database Name
    Value: !Ref DatabaseName
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseName

  DatabaseClusterArn:
    Description: Aurora Cluster ARN
    Value: !Sub arn:aws:rds:${AWS::Region}:${AWS::AccountId}:cluster:${DBClusterName}
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseClusterArn

  DatabaseSecretArn:
    Description: Aurora Secret ARN
    Value: !Ref DBSecret
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseSecretArn

  DatabaseClusterID:
    Description: Aurora Cluster ID
    Value: !Ref RDSCluster
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseClusterID

  AuroraDbURL:
    Description: Aurora Database URL
    Value: !GetAtt RDSCluster.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseURL

  DatabaseMasterUserName:
    Description: Aurora Database User
    Value: !Ref DBMasterUserName
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseMasterUserName

  ProdDataEndpoint:
    Description: "API Prod stage endpoint"
    Value: !Sub "https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/"

  AmplifyMasterBranchUrl:
    Value: !GetAtt AmplifyBranch.BranchName
